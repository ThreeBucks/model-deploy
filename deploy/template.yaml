# auto-deploy namespace
apiVersion: v1
kind: Namespace
metadata:
  name: content-auto-deploy
  labels:
    app: content-auto-deploy
    istio-injection: enabled
  annotations:
    field.cattle.io/projectId: c-f8rw4:p-7s2gb
---
# auto-deploy cgi deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auto-deploy-cgi
  namespace: content-auto-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: auto-deploy-cgi
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: auto-deploy-cgi
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: evg-content
                operator: In
                values:
                - "true"
      restartPolicy: Always
      imagePullSecrets:
      - name: harbor
      terminationGracePeriodSeconds: 3
      containers:
      - name: auto-deploy-cgi
        image: __IMAGE__
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 4
            memory: 12Gi
        ports:
        - containerPort: 80
        command:
        - gunicorn
        - server:app
        - -t
        - "120"
        - -b
        - 0.0.0.0:80
        - -w
        - "32"
        livenessProbe:
          httpGet:
            path: /api/ping
            port: 80
          initialDelaySeconds: 120
          timeoutSeconds: 20
          periodSeconds: 10
        volumeMounts:
          - mountPath: /monitor/tools
            name: monitor-alarm
          - mountPath: /tmp
            name: monitor-alarm-tmp
          - mountPath: /data/corefiles
            name: corefiles
      volumes:
        - name: monitor-alarm
          hostPath:
            path: /data/services/op_agent_d/tools
        - name: monitor-alarm-tmp
          hostPath:
            path: /tmp
        - name: corefiles
          hostPath:
            path: /data/corefiles
---
# auto-deploy cgi service
apiVersion: v1
kind: Service
metadata:
  name: auto-deploy-cgi
  namespace: content-auto-deploy
spec:
  selector:
    app: auto-deploy-cgi
  ports:
  - name: http-auto-deploy-cgi
    port: 80
    targetPort: 80
  type: ClusterIP
---
# tf-serving model deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: oilpaint-tf-serving
  namespace: content-auto-deploy
spec:
  replicas: 2
  selector:
    matchLabels:
      app: oilpaint-tf-serving
  minReadySeconds: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: oilpaint-tf-serving
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: evg-content
                operator: In
                values:
                - "true"
      restartPolicy: Always
      imagePullSecrets:
      - name: harbor
      containers:
      - name: oilpaint-tf-serving
        image: harbor.bigo.sg/bigo_ai/icpm/content/comics/models/tensorflow_serving_gpu_oilpaint_mmpro:latest
        imagePullPolicy: Always
        resources:
          limits:
          #   nvidia.com/gpu: "1"
          # requests:
          #   nvidia.com/gpu: "1"
            aliyun.com/gpu-mem: 10
        ports:
        - containerPort: 8500
        volumeMounts:
          - mountPath: /data/corefiles
            name: corefiles
      volumes:
        - name: corefiles
          hostPath:
            path: /data/corefiles
---
# tf-serving model service
apiVersion: v1
kind: Service
metadata:
  name: oilpaint-tf-serving
  namespace: content-auto-deploy
spec:
  selector:
    app: oilpaint-tf-serving
  ports:
  - name: grpc-oilpaint-tf-serving
    port: 8500
    targetPort: 8500
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: http-gateway
  namespace: content-auto-deploy
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts: ["*"]
---
# auto-deploy virtual service
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: auto-deploy
  namespace: content-auto-deploy
spec:
  hosts:
    - "*"
  gateways:
    - http-gateway
  http:
  - match:
    - uri:
        prefix: /api/grey/content/auto-deploy
    rewrite:
      uri: /api/content/auto-deploy
    route:
    - destination:
        host: auto-deploy-cgi
---
# auto-deploy destination rule
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: auto-deploy
  namespace: content-auto-deploy
spec:
  host: auto-deploy-cgi
